Steps to create this project
- Create DataBase Table (Using Userdata Here, But database is not implemented here)
- Do Scaffolding (Models Added, DBCONTEXT added)



-*- Create Folder "Service"
    Create a class inside this "Service" name "JwtService.cs"

-*- Create a class inside Models name "AuthenticateResponse"

-*- Create "Startup.cs" file
-*- Update "appsettings.json"
-*- Create Controller file












*- "Program.cs" -*
--------------------------------------------------------------------------------------------------------------------------------------------

using JwtExample.Services;

using Microsoft.AspNetCore.Authentication.JwtBearer;

using Microsoft.IdentityModel.Tokens;

using System.Text;
 
var builder = WebApplication.CreateBuilder(args);
 
// Load configuration

var jwtKey = builder.Configuration["Jwt:Key"];

var jwtIssuer = builder.Configuration["Jwt:Issuer"];

var jwtAudience = builder.Configuration["Jwt:Audience"];
 
// Add services to the container.

builder.Services.AddControllers();

builder.Services.AddEndpointsApiExplorer();

builder.Services.AddSwaggerGen();
 
// Register JwtService

builder.Services.AddSingleton<JwtService>(provider =>

    new JwtService(jwtKey, jwtIssuer, jwtAudience));
 
// Configure JWT authentication

builder.Services.AddAuthentication(x =>

{

    x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;

    x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;

})

.AddJwtBearer(x =>

{

    x.RequireHttpsMetadata = false;  // Keep it True in production

    x.SaveToken = true;

    x.TokenValidationParameters = new TokenValidationParameters

    {

        ValidateIssuerSigningKey = true,

        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtKey)),

        ValidateIssuer = true,

        ValidateAudience = true,

        ValidIssuer = jwtIssuer,

        ValidAudience = jwtAudience

    };

});
 
var app = builder.Build();
 
if (app.Environment.IsDevelopment())

{

    app.UseSwagger();

    app.UseSwaggerUI();

}
 
app.UseHttpsRedirection();

app.UseAuthentication(); // Enable authentication

app.UseAuthorization();  // Enable authorization
 
app.MapControllers();
 
app.Run();

------------------------------------------------------------------------------------------------------------------------------------------




*- "Startup.cs" -*
------------------------------------------------------------------------------------------------------------------------------------------


using Microsoft.AspNetCore.Authentication.JwtBearer;

using Microsoft.AspNetCore.Builder;

using Microsoft.AspNetCore.Hosting;

using Microsoft.Extensions.DependencyInjection;

using Microsoft.Extensions.Hosting;

using Microsoft.IdentityModel.Tokens;

using System.Text;
 
public class Startup

{

    public void ConfigureServices(IServiceCollection services)

    {

        // Configure JWT Authentication

        var key = Encoding.ASCII.GetBytes("Yh2k7QSu4l8CZg5p6X3Pna9L0Miy4D3Bvt0JVr87UcOj69Kqw5R2Nmf4FWs03Hdx"); // Use Strong Secret Key
 
        services.AddAuthentication(x =>

        {

            x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;

            x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;

        })

        .AddJwtBearer(x =>

        {

            x.RequireHttpsMetadata = false; // Production mein true karna

            x.SaveToken = true;

            x.TokenValidationParameters = new TokenValidationParameters

            {

                ValidateIssuerSigningKey = true,

                IssuerSigningKey = new SymmetricSecurityKey(key),

                ValidateIssuer = false,

                ValidateAudience = false

            };

        });
 
        services.AddControllers(); // Add Controller

    }
 
    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)

    {

        if (env.IsDevelopment())

        {

            app.UseDeveloperExceptionPage();  // Show error page in Development Mode

        }
 
        app.UseRouting();   // Enable Routing
 
        app.UseAuthentication(); // Enable Authentication

        app.UseAuthorization();  // Enable Authorization
 
        app.UseEndpoints(endpoints =>

        {

            endpoints.MapControllers();  // Endpoints Map of controller

        });

    }

}
 
--------------------------------------------------------------------------------------------------------------------------------------------------



*- appsettings.json *-
----------------------------------------------------------------------------------------------------------------------------------------------

{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*",
  "Jwt": {
    "Key": "Yh2k7QSu4l8CZg5p6X3Pna9L0Miy4D3Bvt0JVr87UcOj69Kqw5R2Nmf4FWs03Hdx",
    "Issuer": "https://localhost:7074",
    "Audience": "https://localhost:7074"
  },
  "ConnectionStrings": {
    "DefaultConnection": "Server=LAPTOP-RBUJ59QI\\MSSQLSERVER02; Database=MyDB; Trusted_Connection=True;"
  }
}

-----------------------------------------------------------------------------------------------------------------------------------------------



*- "JwtService.cs" -*
----------------------------------------------------------------------------------------------------------------------------------------------

using System;

using System.Collections.Generic;

using System.IdentityModel.Tokens.Jwt;

using System.Security.Claims;

using System.Text;

using Microsoft.IdentityModel.Tokens;
 
namespace JwtExample.Services

{

    public class JwtService

    {

        private readonly string _key;

        private readonly string _issuer;

        private readonly string _audience;
 
        public JwtService(string key, string issuer, string audience)

        {

            _key = key;

            _issuer = issuer;

            _audience = audience;

        }
 
        public string GenerateToken(string userName)

        {

            var claims = new List<Claim>

            {

                new Claim(ClaimTypes.Name, userName)

            };

            // Creates a Security Key to sign JWT, this key converts into Byte Array and then passes into "SymmetricSecurityKey" object
            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_key));

            // It creates Signing credentials which specifies Algorithm,                 [ USING HmacSha256 algorithm ]
            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

            // Creates a "JwtSecurityToken" object in which it specifying the Issue, Audience, Claims, Expiry Time, and Signing Credentials.
            var token = new JwtSecurityToken(

                issuer: _issuer,

                audience: _audience,

                claims: claims,

                expires: DateTime.Now.AddMinutes(30),

                signingCredentials: creds);
 
            return new JwtSecurityTokenHandler().WriteToken(token);

        }

    }

}


------------------------------------------------------------------------------------------------------------------------------------------------
-* "AuthenticateReponse.cs" (in Models)

----------------------------------------------------------------------------------------------------------------------------------------------

using UserTable.Models;

namespace jwt_token_auth.anotherAPI.Models
{
    public class AuthenticateResponse
    {
        public string Username { get; set; }
        public string Token { get; set; }

        public AuthenticateResponse(User user, string token)
        {
            Username = user.Username;
            Token = token;
        }
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------
-* "AuthController.cs" -*
-------------------------------------------------------------------------------------------------------------------------------------------------

using JwtExample.Services;

using Microsoft.AspNetCore.Mvc;
 
namespace JwtExample.Controllers

{

    [Route("api/[controller]")]

    [ApiController]

    public class AuthController : ControllerBase

    {

        private readonly JwtService _jwtService;
 
        public AuthController(JwtService jwtService)

        {

            _jwtService = jwtService;

        }
 
        [HttpPost("token")]

        public IActionResult GenerateToken([FromBody] string userName)

        {

            var token = _jwtService.GenerateToken(userName);

            return Ok(new { token });

        }

    }

}

-----------------------------------------------------------------------------------------------------------------------------------------------
